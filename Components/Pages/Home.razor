@page "/"

@inject UserManager<TeamMember> UserManager
@inject TaskManager.Data.ApplicationDbContext DbContext

<h3>Registered Users and Their Roles</h3>

@if (users == null)
{
    <p>Loading users...</p>
}
else if (!users.Any())
{
    <p>No registered users found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Birth Date</th>
                <th>Work Position</th>
                <th>Skill Level</th>
                <th>Registration date</th>
                <th>Roles</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Email</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.BirthDate.ToShortDateString()</td>
                    <td>@user.WorkPosition</td>
                    <td>@user.SkillLevel</td>
                    <td>@user.RegistrationDate.ToShortDateString()</td>
                    <td>
                        @if (userRoles.ContainsKey(user.Id))
                        {
                            @string.Join(", ", userRoles[user.Id])
                        }
                        else
                        {
                            <span>No role assigned</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h3>Client list</h3>

@if (clients == null)
{
    <p>Loading clients...</p>
}
else if (!clients.Any())
{
    <p>No clients available.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Industry</th>
                <th>Contact Person</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in clients)
            {
                <tr>
                    <td>@client.Name</td>
                    <td>@client.Industry.GetDisplayName()</td>
                    <td>@client.ContactPerson</td>
                    <td>
                        <a href="@($"/client-profile/{client.Id}")" class="btn btn-link">View Profile</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h3>Task List</h3>

@if (tasks == null)
{
    <p>Loading tasks...</p>
}
else if (!tasks.Any())
{
    <p>No tasks available.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Due Date</th>
                <th>Status</th>
                <th>Assigned Team Member</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.Title</td>
                    <td>@task.Description</td>
                    <td>@task.DueDate.ToShortDateString()</td>
                    <td>@task.Status</td>
                    <td>@(task.TeamMember != null ? $"{task.TeamMember.FirstName} {task.TeamMember.LastName}" : "Unassigned")</td>
                    <td>
                        <a href="@($"/task-details/{task.Id}")" class="btn btn-link">Edit Task</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h3>Clients, tasks and team members</h3>

@if (clientTaskAssignments == null)
{
    <p>Loading client-task assignments...</p>
}
else if (!clientTaskAssignments.Any())
{
    <p>No client-task assignments available.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Client Name</th>
                <th>Task Title</th>
                <th>Due Date</th>
                <th>Team Member</th>
                <th>Work Position</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var assignment in clientTaskAssignments)
            {
                <tr>
                    <td>@assignment.ClientName</td>
                    <td>@assignment.TaskTitle</td>
                    <td>@assignment.DueDate</td>
                    <td>@assignment.TeamMemberName</td>
                    <td>@assignment.TeamMemberPosition</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TeamMember>? users;
    private Dictionary<string, List<string>> userRoles = new();
    private List<Client>? clients;
    private List<TaskItem>? tasks;
    private List<ClientTaskAssignment> clientTaskAssignments = new();

    protected override async Task OnInitializedAsync()
    {
        // Fetch all users and their roles
        users = await UserManager.Users.ToListAsync();
        foreach (var user in users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            userRoles[user.Id] = roles.ToList();
        }

        // Fetch all clients and tasks
        clients = await DbContext.Clients.ToListAsync();
        tasks = await DbContext.TaskItems.Include(t => t.TeamMember).ToListAsync();

        // Fetch client, task, and team member assignments
        clientTaskAssignments = await DbContext.TaskItems
            .Include(t => t.Client)
            .Include(t => t.TeamMember)
            .Select(t => new ClientTaskAssignment
                {
                    ClientName = t.Client.Name,
                    TaskTitle = t.Title,
                    DueDate = t.DueDate.ToShortDateString(),
                    TeamMemberName = t.TeamMember != null ? $"{t.TeamMember.FirstName} {t.TeamMember.LastName}" : "Unassigned",
                    TeamMemberPosition = t.TeamMember != null ? t.TeamMember.WorkPosition.ToString() : "N/A"
                })
            .ToListAsync();
    }

    private class ClientTaskAssignment
    {
        public string ClientName { get; set; } = string.Empty;
        public string TaskTitle { get; set; } = string.Empty;
        public string DueDate { get; set; } = string.Empty;
        public string TeamMemberName { get; set; } = "Unassigned";
        public string TeamMemberPosition { get; set; } = "N/A";
    }
}
