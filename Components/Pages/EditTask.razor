@page "/edit-task/{taskId:int}"

@inject TaskManager.Data.ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject UserManager<TeamMember> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Edit Task</h3>

@if (!isAuthorized)
{
    <p class="text-danger">You do not have permission to access this page.</p>
}
else if (task == null)
{
    <p class="text-danger">Task not found.</p>
}
else
{
    <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" method="post" FormName="editTask">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        <!-- Task Title -->
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Title" class="form-control" placeholder="Task Title" readonly="@(Input.Status == Status.Closed || !canEditAll)" />
            <label for="title">Task Title</label>
            <ValidationMessage For="() => Input.Title" class="text-danger" />
        </div>

        <!-- Task Description -->
        <div class="form-floating mb-3">
            <InputTextArea @bind-Value="Input.Description" class="form-control" placeholder="Task Description" readonly="@(Input.Status == Status.Closed || !canEditAll)" />
            <label for="description">Description</label>
            <ValidationMessage For="() => Input.Description" class="text-danger" />
        </div>

        <!-- Due Date -->
        <div class="form-floating mb-3">
            <InputDate @bind-Value="Input.DueDate" class="form-control" readonly="@(Input.Status == Status.Closed || !canEditAll)" />
            <label for="dueDate">Due Date</label>
            <ValidationMessage For="() => Input.DueDate" class="text-danger" />
        </div>

        <!-- Status (Only Assigned User Can Change to Completed) -->
        <div class="form-floating mb-3">
            <InputSelect @bind-Value="Input.Status" class="form-control" disabled="@(!canEditStatus || Input.Status == Status.Closed)">
                @foreach (var status in Enum.GetValues<Status>())
                {
                    <option value="@status">@status.GetDisplayName()</option>
                }
            </InputSelect>
            <label for="status">Status</label>
            <ValidationMessage For="() => Input.Status" class="text-danger" />
        </div>

        <!-- Team Member Selection (Admin and Project Manager Only) -->
        @if (canEditAll && Input.Status != Status.Closed)
        {
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.TeamMemberId" class="form-control">
                    <option value="">Select Team Member</option>
                    @foreach (var member in availableTeamMembers)
                    {
                        <option value="@member.Id">@member.FirstName @member.LastName</option>
                    }
                </InputSelect>
                <label for="teamMember">Assigned Team Member</label>
                <ValidationMessage For="() => Input.TeamMemberId" class="text-danger" />
            </div>
        }

        <button type="submit" class="btn btn-primary w-100" disabled="@(Input.Status == Status.Closed)">Save Changes</button>
    </EditForm>
    @if (isAdmin)
    {
        <a href="/confirm-delete/task/@taskId" class="btn btn-danger mt-3">Delete Task</a>
    }
}

@code {
    [Parameter]
    public int taskId { get; set; }

    private TaskItem? task;
    private List<TeamMember> availableTeamMembers = new();
    private bool isAuthorized = false;
    private bool canEditAll = false;
    private bool canEditStatus = false;
    private bool isAdmin = false;

    [SupplyParameterFromForm]
    private EditTaskDTO Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Get the logged-in user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        // Verify if the user is logged in
        if (user == null)
        {
            NavigationManager.NavigateTo("/Account/AccessDenied");
            return;
        }

        // Get the roles of the user
        var roles = await UserManager.GetRolesAsync(user);
        isAdmin = roles.Contains("Admin");
        var isProjectManager = roles.Contains("ProjectManager");

        // Load the task from the database
        task = await DbContext.TaskItems.Include(t => t.Client).FirstOrDefaultAsync(t => t.Id == taskId);

        if (task == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        // Verify if the user is an administrator, the project manager assigned to the client, or the user assigned to the task
        if (isAdmin)
        {
            isAuthorized = true;
            canEditAll = true;
        }
        else if (isProjectManager && task.Client?.ProjectManagerId == user.Id)
        {
            isAuthorized = true;
            canEditAll = true;
        }
        else if (task.TeamMemberId == user.Id)
        {
            isAuthorized = true;
            canEditStatus = true;
        }

        // Set the input model values from the loaded task
        Input.Title ??= task.Title;
        Input.Description ??= task.Description;
        Input.DueDate = Input.DueDate == default ? task.DueDate : Input.DueDate;
        Input.Status = Input.Status == default ? task.Status : Input.Status;
        Input.TeamMemberId = Input.TeamMemberId == default ? task.TeamMemberId : Input.TeamMemberId;

        // Load all team members with the role "Others"
        var allUsers = await DbContext.Users.ToListAsync();
        foreach (var userItem in allUsers)
        {
            var userRoles = await UserManager.GetRolesAsync(userItem);
            if (userRoles.Contains("Others"))
            {
                availableTeamMembers.Add(userItem);
            }
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (task != null && isAuthorized)
        {
            if (canEditAll && task.Status != Status.Closed)
            {
                task.Title = Input.Title ?? string.Empty;
                task.Description = Input.Description ?? string.Empty;
                task.DueDate = Input.DueDate;
                task.TeamMemberId = Input.TeamMemberId;
            }

            if (canEditStatus)
            {
                task.Status = Input.Status;
            }

            DbContext.TaskItems.Update(task);
            await DbContext.SaveChangesAsync();
            NavigationManager.NavigateTo("/");
        }
    }

    private sealed class EditTaskDTO
    {
        [Required(ErrorMessage = "Title is required.")]
        [StringLength(200, ErrorMessage = "Title can have a maximum of 200 characters.")]
        public string? Title { get; set; }

        [Required(ErrorMessage = "Description is required.")]
        [StringLength(1000, ErrorMessage = "Description can have a maximum of 1000 characters.")]
        public string? Description { get; set; }

        [Required(ErrorMessage = "Due date is required.")]
        [DataType(DataType.Date)]
        public DateTime DueDate { get; set; }

        [Required(ErrorMessage = "Status is required.")]
        public Status Status { get; set; }

        [Required(ErrorMessage = "Team member is required.")]
        public string? TeamMemberId { get; set; }
    }
}
