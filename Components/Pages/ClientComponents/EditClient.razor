@page "/edit-client/{clientId:int}"

@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<TeamMember> UserManager

<PageTitle>@Title</PageTitle>
<SectionContent SectionName="page-title">@Title</SectionContent>

@if (isAuthorized == false)
{
    <p class="text-danger">You do not have permission to edit this client.</p>
}
else if (client != null)
{
    <div class="row d-flex justify-content-center">
        <div class="col-lg-8">
            <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" method="post" FormName="clientProfile">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <!-- Client (or company) name  -->
                @if (isAdmin)
                {
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Name" class="form-control" placeholder="Client Name" />
                        <ValidationMessage For="() => Input.Name" class="text-danger" />
                        <label for="name">Client Name</label>
                    </div>

                    <!-- Description -->
                    <div class="form-floating mb-3">
                        <InputTextArea @bind-Value="Input.Description" class="form-control" placeholder="Description" />
                        <ValidationMessage For="() => Input.Description" class="text-danger" />
                        <label for="description">Description</label>
                    </div>

                    <!-- Industry -->
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="Input.Industry" class="form-control">
                            @foreach (var industry in Enum.GetValues<Industry>())
                            {
                                <option value="@industry">@industry.GetDisplayName()</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Input.Industry" class="text-danger" />
                        <label for="industry">Industry</label>
                    </div>
                }

                <!-- Start date (readonly) -->
                <div class="form-floating mb-3">
                    <input class="form-control" id="startDate" value="@client.StartDate.ToShortDateString()" readonly />
                    <label for="startDate">Start Date</label>
                </div>

                <!-- Contact Person -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.ContactPerson" class="form-control" placeholder="Contact Person" />
                    <ValidationMessage For="() => Input.ContactPerson" class="text-danger" />
                    <label for="contactPerson">Contact Person</label>
                </div>

                <!-- Contact e-mail -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.ContactEmail" class="form-control" placeholder="Contact Email" />
                    <ValidationMessage For="() => Input.ContactEmail" class="text-danger" />
                    <label for="contactEmail">Contact Email</label>
                </div>

                <!-- Contact phone number -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.ContactPhone" class="form-control" placeholder="Contact Phone" />
                    <ValidationMessage For="() => Input.ContactPhone" class="text-danger" />
                    <label for="contactPhone">Contact Phone</label>
                </div>

                <!-- Project Manager Selection -->
                @if (isAdmin)
                {
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="Input.ProjectManagerId" class="form-control">
                            <option value="">Select Project Manager</option>
                            @foreach (var manager in availableManagers)
                            {
                                <option value="@manager.Id">@manager.FirstName @manager.LastName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Input.ProjectManagerId" class="text-danger" />
                        <label for="projectManager">Project Manager</label>
                    </div>
                }

                <div class="d-flex justify-content-center">
                    <button class="btn btn-primary" type="submit">Save Changes</button>
                </div>
                <div class="d-flex justify-content-center">
                @if (isAdmin)
                {
                    <a href="/confirm-delete/client/@clientId" class="btn btn-danger mt-3">Delete Client</a>
                }
                </div>
            </EditForm>

        </div>
    </div>
}
else
{
    <p>Client was not found.</p>
}

@code {
    [Parameter]
    public int clientId { get; set; }

    public string Title { get; private set; } = "Edit client";

    private Client? client;
    private List<TeamMember> availableManagers = new();
    private bool isAuthorized = false;
    private bool isAdmin = false;

    [SupplyParameterFromForm]
    private ClientProfileDTO Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Get logged in user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        // Verify that the user is logged in
        if (user == null)
        {
            Navigation.NavigateTo("/Account/AccessDenied");
            return;
        }

        // Get client from database
        client = await DbContext.Clients.Include(c => c.ProjectManager).FirstOrDefaultAsync(c => c.Id == clientId);

        if (client == null)
        {
            // If  client doesn't exist, redirect to homepage
            Navigation.NavigateTo("/");
            return;
        }

        // Verify that the user is the assigned project manager for this client or is an administrator
        var roles = await UserManager.GetRolesAsync(user);
        isAdmin = roles.Contains("Admin");

        if (isAdmin || client.ProjectManagerId == user.Id)
        {
            isAuthorized = true;

            // Fill Input model with client data for editing
            Input.Name ??= client.Name;
            Input.Description ??= client.Description;
            Input.Industry = Input.Industry == default ? client.Industry : Input.Industry;
            Input.ContactPerson ??= client.ContactPerson;
            Input.ContactEmail ??= client.ContactEmail;
            Input.ContactPhone ??= client.ContactPhone;
            Input.ProjectManagerId = Input.ProjectManagerId == default ? client.ProjectManagerId : Input.ProjectManagerId;
        }
        else
        {
            // If the user does not have permissions, set the flag and display an error message
            isAuthorized = false;
        }

        // Load available project managers
        availableManagers = await DbContext.Users
            .Where(u => u.WorkPosition == WorkPosition.ProjectManager)
            .ToListAsync();
    }

    private async Task OnValidSubmitAsync()
    {
        // Get logged in user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        // Verify that the user is logged in
        if (user == null)
        {
            Navigation.NavigateTo("/Account/AccessDenied");
            return;
        }

        // Get client from database
        client = await DbContext.Clients.Include(c => c.ProjectManager).FirstOrDefaultAsync(c => c.Id == clientId);

        if (client == null)
        {
            // If the client doesn't exist, redirect to homepage
            Navigation.NavigateTo("/");
            return;
        }

        if (client != null && isAuthorized)
        {
            if (isAdmin || client.ProjectManagerId == user.Id)
            {
                if (client.ContactPerson != Input.ContactPerson || client.ContactEmail != Input.ContactEmail || client.ContactPhone != Input.ContactPhone)
                {
                    client.ContactPerson = Input.ContactPerson ?? string.Empty;
                    client.ContactEmail = Input.ContactEmail ?? string.Empty;
                    client.ContactPhone = Input.ContactPhone ?? string.Empty;
                }

                if (isAdmin)
                {
                    client.Name = Input.Name ?? string.Empty;
                    client.Description = Input.Description ?? string.Empty;
                    client.Industry = Input.Industry;
                    client.ProjectManagerId = Input.ProjectManagerId;
                }

                DbContext.Clients.Update(client);
                await DbContext.SaveChangesAsync();
                Navigation.NavigateTo("/");
            }
        }
    }

    private async Task OnDeleteClientAsync()
    {
        if (client != null && isAdmin)
        {
            DbContext.Clients.Remove(client);
            await DbContext.SaveChangesAsync();
            Navigation.NavigateTo("/");
        }
    }

    private sealed class ClientProfileDTO
    {
        [Required(ErrorMessage = "Client name is required.")]
        [StringLength(200, ErrorMessage = "Client name can have a maximum of 200 characters.")]
        [StartsWithUppercase(ErrorMessage = "Client name must start with an uppercase letter.")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "Description is required.")]
        [StringLength(1000, ErrorMessage = "Description can have a maximum of 1000 characters.")]
        public string? Description { get; set; }

        [Required(ErrorMessage = "Industry is required.")]
        public Industry Industry { get; set; }

        [Required(ErrorMessage = "Contact person is required.")]
        [StringLength(100, ErrorMessage = "Contact person name can have a maximum of 100 characters.")]
        [RegularExpression(@"^[a-zA-Zá-žÁ-Ž\s]+$", ErrorMessage = "Contact person name contains invalid characters.")]
        [StartsWithUppercase(ErrorMessage = "Contact person name must start with an uppercase letter.")]
        public string? ContactPerson { get; set; }

        [Required(ErrorMessage = "Contact email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string? ContactEmail { get; set; }

        [Required(ErrorMessage = "Contact phone is required.")]
        [Phone(ErrorMessage = "Enter the phone number in the correct format.")]
        public string? ContactPhone { get; set; }

        [Required(ErrorMessage = "A project manager must be assigned.")]
        public string? ProjectManagerId { get; set; }
    }
}
