@page "/client/{clientId:int}"

@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<TeamMember> UserManager

<PageTitle>@Title</PageTitle>
<SectionContent SectionName="page-title">@Title</SectionContent>

@if (client == null)
{
    <p>Loading client data...</p>
}
else
{
    <div class="card my-5 mx-auto col-lg-8 text-center">
        <div class="card-header text-white bg-primary">
            <h3 class="card-title mb-0">@client.Name</h3>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <strong>Description:</strong>
                <p class="mb-0">@client.Description</p>
            </div>
            <div class="mb-3">
                <strong>Industry:</strong>
                <p class="mb-0">@client.Industry.GetDisplayName()</p>
            </div>
            <div class="mb-3">
                <strong>Contact Person:</strong>
                <p class="mb-0">@client.ContactPerson</p>
            </div>
            <div class="mb-3">
                <strong>Contact Email:</strong>
                <p class="mb-0">@client.ContactEmail</p>
            </div>
            <div class="mb-3">
                <strong>Contact Phone:</strong>
                <p class="mb-0">@client.ContactPhone</p>
            </div>
            <div class="mb-3">
                <strong>Start Date of Cooperation:</strong>
                <p class="mb-0">@client.StartDate.ToShortDateString()</p>
            </div>
            @if (client.ProjectManager != null)
            {
                <div class="mb-3">
                    <strong>Project Manager:</strong>
                    <p class="mb-0">@client.ProjectManager.FirstName @client.ProjectManager.LastName</p>
                </div>
            }

            <!-- Action Buttons with links -->
            @if (isAdmin || canEditClient)
            {
                <div class="d-flex justify-content-between mt-4">
                    @if (canEditClient)
                    {
                        <a href="/edit-client/@clientId" class="btn btn-warning">
                            <span class="bi bi-pencil-square me-1"></span> Edit Client
                        </a>
                    }
                    @if (isAdmin)
                    {
                        <a href="/confirm-delete/client/@clientId" class="btn btn-danger">
                            <span class="bi bi-trash-fill me-1"></span> Delete Client
                        </a>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Task List -->
    @if (client.Tasks.Any())
    {
        <h4 class="text-center mt-5">Assigned Tasks</h4>
        @foreach (var task in client.Tasks)
        {
            <div class="card my-4 mx-auto col-lg-8 text-center">
                <div class="card-header bg-secondary text-white">
                    <h5 class="card-title mb-0">@task.Title</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <strong>Description:</strong>
                        <p class="mb-0">@task.Description</p>
                    </div>
                    <div class="mb-3">
                        <strong>Due Date:</strong>
                        <p class="mb-0">@task.DueDate.ToShortDateString()</p>
                    </div>
                    <div class="mb-3">
                        <strong>Status:</strong>
                        <p class="mb-0">@task.Status.GetDisplayName()</p>
                    </div>
                    @if (task.TeamMember != null)
                    {
                        <div class="mb-3">
                            <strong>Assigned Team Member:</strong>
                            <p class="mb-0">@task.TeamMember.FirstName @task.TeamMember.LastName</p>
                        </div>
                    }
                    <div class="d-flex justify-content-center mt-4">
                        <a href="/task/@task.Id" class="btn btn-primary">
                            <span class="bi bi-eye me-1"></span> View Task
                        </a>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p class="text-muted text-center mt-5">No tasks assigned to this client.</p>
    }
}

@code {
    [Parameter]
    public int clientId { get; set; }

    public string Title { get; private set; } = "Client Profile";

    private Client? client;
    private bool isAdmin = false;
    private bool canEditClient = false;

    protected override async Task OnInitializedAsync()
    {
        // Načtení klienta a jeho úkolů z databáze
        client = await DbContext.Clients
            .Include(c => c.ProjectManager)
            .Include(c => c.Tasks)
            .ThenInclude(t => t.TeamMember)
            .FirstOrDefaultAsync(c => c.Id == clientId);

        if (client == null)
        {
            // Přesměrování na stránku "not found" pokud klient neexistuje
            Navigation.NavigateTo("/not-found");
            return;
        }

        // Získání přihlášeného uživatele
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        // Pokud uživatel není přihlášený, necháme profil klienta zobrazit, ale bez oprávnění na úpravy
        if (user == null)
        {
            return;
        }

        // Získání rolí uživatele
        var roles = await UserManager.GetRolesAsync(user);
        isAdmin = roles.Contains("Admin");

        // Ověření, zda je uživatel projektovým manažerem přiřazeným ke klientovi
        if (client.ProjectManagerId == user.Id || isAdmin)
        {
            canEditClient = true;
        }
    }
}
