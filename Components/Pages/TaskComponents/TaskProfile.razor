@page "/task/{taskId:int}"

@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<TeamMember> UserManager

<PageTitle>@Title</PageTitle>
<SectionContent SectionName="page-title">@Title</SectionContent>

@if (task == null)
{
    <p>Loading task data...</p>
}
else
{
    <div class="card my-5 mx-auto col-lg-8 text-center">
        <div class="card-header text-white bg-primary">
            <h3 class="card-title mb-0">@task.Title</h3>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <strong>Description:</strong>
                <p class="mb-0">@task.Description</p>
            </div>
            <div class="mb-3">
                <strong>Due Date:</strong>
                <p class="mb-0">@task.DueDate.ToShortDateString()</p>
            </div>
            <div class="mb-3">
                <strong>Status:</strong>
                <p class="mb-0">@task.Status.GetDisplayName()</p>
            </div>
            <div class="mb-3">
                <strong>Assigned Client:</strong>
                <p class="mb-0">@task.Client?.Name</p>
            </div>
            <div class="mb-3">
                <strong>Assigned Team Member:</strong>
                @if (task.TeamMember != null)
                {
                    <p class="mb-0">@task.TeamMember.FirstName @task.TeamMember.LastName</p>
                }
                else
                {
                    <p class="mb-0">No team member assigned</p>
                }
            </div>
            <div class="mb-3">
                <strong>Start Date:</strong>
                <p class="mb-0">@task.StartDate.ToShortDateString()</p>
            </div>
            @if (task.CompletedDate != null)
            {
                <div class="mb-3">
                    <strong>Closed Date:</strong>
                    <p class="mb-0">@task.CompletedDate?.ToShortDateString()</p>
                </div>
            }

            <!-- Action Buttons with links -->
            <div class="d-flex justify-content-between mt-4">
                @if (canEditTask)
                {
                    <a href="/edit-task/@taskId" class="btn btn-warning">
                        <span class="bi bi-pencil-square me-1"></span> Edit Task
                    </a>
                }
                @if (isAdmin)
                {
                    <a href="/confirm-delete/task/@taskId" class="btn btn-danger">
                        <span class="bi bi-trash-fill me-1"></span> Delete Task
                    </a>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int taskId { get; set; }

    public string Title { get; private set; } = "Task profile";

    private TaskItem? task;
    private bool isAdmin = false;
    private bool canEditTask = false;

    protected override async Task OnInitializedAsync()
    {
        // Load a task from the database.
        task = await DbContext.TaskItems.Include(t => t.Client).Include(t => t.TeamMember).FirstOrDefaultAsync(t => t.Id == taskId);
        if (task == null)
        {
            // Redirect to homepage if task does not exist.
            Navigation.NavigateTo("/");
            return;
        }

        // Get logged in user.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        // If the user is not logged in, we display the task details without edit or delete permissions.
        if (user == null)
        {
            return;
        }

        // Get user role.
        var roles = await UserManager.GetRolesAsync(user);
        isAdmin = roles.Contains("Admin");

        // Verify that the user is the project manager assigned to the client or the user assigned to the task.
        if (isAdmin || (task.Client != null && task.Client.ProjectManagerId == user.Id) || task.TeamMemberId == user.Id)
        {
            canEditTask = true;
        }
    }
}