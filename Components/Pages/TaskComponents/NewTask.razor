@page "/new-task"

@inject TaskManager.Data.ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject UserManager<TeamMember> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>@Title</PageTitle>
<SectionContent SectionName="page-title">@Title</SectionContent>

@if (!isAuthorized)
{
    <p class="text-danger">You do not have permission to access this page.</p>
}
else if (!availableClients.Any())
{
    <p class="text-danger">No clients available. Please create a client before creating a new task.</p>
}
else if (!availableTeamMembers.Any())
{
    <p class="text-danger">No team members available for assignment. Please hire team members before creating a new task.</p>
}
else
{
    <div class="row d-flex justify-content-center">
        <div class="col-lg-8">
            <EditForm Model="Input" OnValidSubmit="AddTask" method="post" FormName="newTask">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <!-- Task Title -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Title" class="form-control" placeholder="Task Title" />
                    <label for="title">Task Title</label>
                    <ValidationMessage For="() => Input.Title" class="text-danger" />
                </div>

                <!-- Task Description -->
                <div class="form-floating mb-3">
                    <InputTextArea @bind-Value="Input.Description" class="form-control" placeholder="Task Description" />
                    <label for="description">Description</label>
                    <ValidationMessage For="() => Input.Description" class="text-danger" />
                </div>

                <!-- Due Date -->
                <div class="form-floating mb-3">
                    <InputDate @bind-Value="Input.DueDate" class="form-control" />
                    <label for="dueDate">Due Date</label>
                    <ValidationMessage For="() => Input.DueDate" class="text-danger" />
                </div>

                <!-- Client Selection -->
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="Input.ClientId" class="form-control">
                        @foreach (var client in availableClients)
                        {
                            <option value="@client.Id">@client.Name - @client.Industry</option>
                        }
                    </InputSelect>
                    <label for="client">Select client</label>
                    <ValidationMessage For="() => Input.ClientId" class="text-danger" />
                </div>

                <!-- Team Member Assignment -->
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="Input.TeamMemberId" class="form-control">
                        @foreach (var member in availableTeamMembers)
                        {
                            <option value="@member.Id">@member.FirstName @member.LastName - @member.WorkPosition (@member.SkillLevel)</option>
                        }
                    </InputSelect>
                    <label for="teamMember">Select team member</label>
                    <ValidationMessage For="() => Input.TeamMemberId" class="text-danger" />
                </div>

                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn btn-primary">Create Task</button>
                </div>

            </EditForm>
        </div>
    </div>
}

@code {
    public string Title { get; private set; } = "Add new task";

    private List<Client> availableClients = new();
    private List<TeamMember> availableTeamMembers = new();
    private bool isAuthorized = false;

    [SupplyParameterFromForm]
    private TaskDTO Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Get a logged-in user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        // Verify that the user is logged-in
        if (user == null)
        {
            NavigationManager.NavigateTo("/Account/AccessDenied");
            return;
        }

        // Get user role
        var roles = await UserManager.GetRolesAsync(user);
        var isAdmin = roles.Contains("Admin");
        var isProjectManager = roles.Contains("ProjectManager");

        // Set permissions
        isAuthorized = isAdmin || isProjectManager;

        if (!isAuthorized)
        {
            return;
        }

        // Load available clients for the logged in user (admin sees all, PM sees only assigned ones)
        if (isAdmin)
        {
            availableClients = await DbContext.Clients.ToListAsync();
        }
        else if (isProjectManager)
        {
            availableClients = await DbContext.Clients
                .Where(c => c.ProjectManagerId == user.Id)
                .ToListAsync();
        }

        // If no clients are available, the user is not allowed to continue
        if (!availableClients.Any())
        {
            isAuthorized = false;
            return;
        }

        // Load available team members (except Admin and ProjectManager)
        var allUsers = await DbContext.Users.ToListAsync();
        availableTeamMembers = new List<TeamMember>();

        foreach (var currentUser in allUsers)
        {
            var currentRoles = await UserManager.GetRolesAsync(currentUser);
            if (!currentRoles.Contains("Admin") && !currentRoles.Contains("ProjectManager"))
            {
                availableTeamMembers.Add(currentUser);
            }
        }
    }

    public async Task AddTask(EditContext editContext)
    {
        // Create new task
        var task = new TaskItem
            {
                Title = Input.Title,
                Description = Input.Description,
                DueDate = Input.DueDate,
                ClientId = Input.ClientId,
                TeamMemberId = Input.TeamMemberId
            };

        // Add new task to database
        DbContext.TaskItems.Add(task);
        await DbContext.SaveChangesAsync();

        // Redirect to homepage
        NavigationManager.NavigateTo("/");
    }

    private sealed class TaskDTO
    {
        [Required(ErrorMessage = "Title is required.")]
        [StringLength(200, ErrorMessage = "Title can have a maximum of 200 characters.")]
        [StartsWithUppercase(ErrorMessage = "Title must start with an uppercase letter.")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "Description is required.")]
        [StringLength(1000, ErrorMessage = "Description can have a maximum of 1000 characters.")]
        [StartsWithUppercase(ErrorMessage = "Description must start with an uppercase letter.")]
        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "Due date is required.")]
        [DataType(DataType.Date)]
        [DueDate(ErrorMessage = "Due date cannot be in the past.")]
        public DateTime DueDate { get; set; }

        [Required(ErrorMessage = "A client must be selected.")]
        public int ClientId { get; set; }

        [Required(ErrorMessage = "Team member must be selected.")]
        public string? TeamMemberId { get; set; }
    }
}
