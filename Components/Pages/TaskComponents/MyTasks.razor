@page "/my-tasks"

@using Microsoft.EntityFrameworkCore
@using TaskManager.Models
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<TeamMember> UserManager

<PageTitle>@Title</PageTitle>
<SectionContent SectionName="page-title">@Title</SectionContent>

@if (!isAuthorized)
{
    <p class="text-danger">You do not have permission to access this page.</p>
}
else if (tasks == null)
{
    <p>Loading tasks...</p>
}
else if (!tasks.Any())
{
    <p>You have no tasks assigned.</p>
}
else
{
    <div class="list-group my-4">
        @foreach (var task in tasks)
        {
            <div class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <h5 class="mb-1">@task.Title</h5>
                    <p class="mb-1">Due Date: @task.DueDate.ToShortDateString()</p>
                    <small>Status: @task.Status.GetDisplayName()</small>
                </div>
                <a href="/task/@task.Id" class="btn btn-primary">View Task</a>
            </div>
        }
    </div>
}

@code {
    public string Title { get; private set; } = "My tasks";

    private List<TaskItem> tasks = new();
    private bool isAuthorized = false;

    protected override async Task OnInitializedAsync()
    {
        // Získání přihlášeného uživatele
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        // Pokud uživatel není přihlášený, přesměrujeme na odmítnutí přístupu
        if (user == null)
        {
            return;
        }

        // Získání rolí uživatele
        var roles = await UserManager.GetRolesAsync(user);
        isAuthorized = roles.Contains("Others");

        if (isAuthorized)
        {
            // Načtení úkolů, které mají přiřazeného uživatele s ID přihlášeného uživatele
            tasks = await DbContext.TaskItems
                .Where(t => t.TeamMemberId == user.Id)
                .ToListAsync();
        }
    }
}
