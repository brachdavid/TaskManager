@page "/Account/Register"

@inject UserManager<TeamMember> UserManager
@inject IUserStore<TeamMember> UserStore
@inject SignInManager<TeamMember> SignInManager
@inject IEmailSender<TeamMember> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>@Title</PageTitle>
<SectionContent SectionName="page-title">@Title</SectionContent>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />

            <!-- E-mail -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <!-- Password -->
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <!-- Confirm password -->
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <!-- First name -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control" placeholder="First Name" />
                <label for="firstName">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>

            <!-- Last name -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control" placeholder="Last Name" />
                <label for="lastName">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>

            <!-- Birth date -->
            <div class="form-floating mb-3">
                <InputDate @bind-Value="Input.BirthDate" class="form-control" placeholder="Birth Date" />
                <label for="birthDate">Birth Date</label>
                <ValidationMessage For="() => Input.BirthDate" class="text-danger" />
            </div>

            <!-- Work position -->
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.WorkPosition" class="form-control">
                    @foreach (var position in Enum.GetValues<WorkPosition>())
                    {
                        <option value="@position">@position.GetDisplayName()</option>
                    }
                </InputSelect>
                <label for="workPosition">Work Position</label>
                <ValidationMessage For="() => Input.WorkPosition" class="text-danger" />
            </div>

            <!-- Skill level -->
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.SkillLevel" class="form-control">
                    @foreach (var level in Enum.GetValues<SkillLevel>())
                    {
                        <option value="@level">@level.GetDisplayName()</option>
                    }
                </InputSelect>
                <label for="skillLevel">Skill Level</label>
                <ValidationMessage For="() => Input.SkillLevel" class="text-danger" />
            </div>

            <!-- Phone Number -->
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Phone number" />
                <label for="phone-number">Phone Number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    public string Title { get; private set; } = "Register";

    [SupplyParameterFromForm]
    private RegisterDTO Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.BirthDate = Input.BirthDate;
        user.WorkPosition = Input.WorkPosition;
        user.SkillLevel = Input.SkillLevel;
        user.PhoneNumber = Input.PhoneNumber;

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        // Assign roles based on WorkPosition or Email
        if (Input.Email.Equals("admin@taskmanager.com", StringComparison.OrdinalIgnoreCase))
        {
            await UserManager.AddToRoleAsync(user, "Admin");
        }
        else if (user.WorkPosition == WorkPosition.ProjectManager)
        {
            await UserManager.AddToRoleAsync(user, "ProjectManager");
        }
        else
        {
            await UserManager.AddToRoleAsync(user, "Others");
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private TeamMember CreateUser()
    {
        try
        {
            return Activator.CreateInstance<TeamMember>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(TeamMember)}'. " +
                $"Ensure that '{nameof(TeamMember)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<TeamMember> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<TeamMember>)UserStore;
    }

    private sealed class RegisterDTO
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "First name is required.")]
        [StringLength(100, ErrorMessage = "First name can have a maximum of 100 characters.")]
        [RegularExpression(@"^[a-zA-Zá-žÁ-Ž]+([ '-][a-zA-Zá-žÁ-Ž]+)*$", ErrorMessage = "First name contains invalid characters.")]
        [StartsWithUppercase(ErrorMessage = "First name must start with an uppercase letter.")]
        [Display(Name = "First name")]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Last name is required.")]
        [StringLength(100, ErrorMessage = "Last name can have a maximum of 100 characters.")]
        [RegularExpression(@"^[a-zA-Zá-žÁ-Ž]+([ '-][a-zA-Zá-žÁ-Ž]+)*$", ErrorMessage = "Last name contains invalid characters.")]
        [StartsWithUppercase(ErrorMessage = "Last name must start with an uppercase letter.")]
        [Display(Name = "Last name")]
        public string LastName { get; set; } = "";

        [Required(ErrorMessage = "Birth date is required.")]
        [DataType(DataType.Date)]
        [MinimumAge(18, ErrorMessage = "Team member must be at least 18 years old.")]
        [Display(Name = "Birthdate")]
        public DateTime BirthDate { get; set; }

        [Required(ErrorMessage = "Work position is required.")]
        [Display(Name = "Work position")]
        public WorkPosition WorkPosition { get; set; }

        [Required(ErrorMessage = "Skill level is required.")]
        [Display(Name = "Skill level")]
        public SkillLevel SkillLevel { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "Phone number is required.")]
        [Phone(ErrorMessage = "Enter the phone number in the correct format.")]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
